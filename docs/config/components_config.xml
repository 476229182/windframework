<?xml version="1.0" encoding="UTF-8"?>
<!-- <component name='' path='' initMethod='' scope="application/singleton/prototype/" 
	proxy='' destroy=''> -->
<!-- <property property-name='' ref/value/path=''> -->
<!-- <constructor-arg ref/value/path=''> -->
<!-- <config resource=''> -->
<!-- </component> -->
<!-- 
组件的配置标签说明：
name: 		组件的名字，唯一用于在应用中获取对应组件的对象实例
path: 		该组件的实现
scope: 		组件对象的范围： {singleton: 单例; application: 整个应用； prototype: 当前使用}
initMethod: 在应用对象生成时执行的方法
destroy： 	在应用结束的时候执行的操作
proxy：	 	组件是否用代理的方式调用

constructor-args：构造方法的参数
	constructor-arg：
		name：参数的位置,起始位置从0开始，第一个参数为0，第二个参数为1
		参数的值的表示方式有一下几种：
		ref: 该属性是一个对象，ref的值对应着组件的名字
		value: 一个字串值
		path: path指向的类的实例将会被创建传递给该属性
		
properties: 属性的配置，表现为组件中的类属性
	property: 
		name:属性名称
		属性值的表示方式有以下几种：
		ref: 该属性是一个对象，ref的值对应着组件的名字，表现为在组件中获取方式为“_get+属性名()”称来获取
		value: 一个字串值
		path: path指向的类的实例将会被创建传递给该属性


config： 组件的配置-该值对应的配置会通过setConfig接口传递给组件；
	resource: 指定一个外部地址，将会去包含该文件
 -->
<components>
	<!--windCache组件：框架默认缓存机制；当wind_config中‘iscache’属性标签值为‘0’时该功能关闭。 默认windCache组件定义如下定义 -->
	<component name='windCache' path='WIND:cache.strategy.WindFileCache'
		scope='singleton' proxy='true'>
		<!-- <initMethod>init</initMethod>
		<destroy>commint</destroy>
		<constructor-args>
			<constructor-arg name='0' value='DATA:log' />
			<constructor-arg name='1' value='2' />
		</constructor-args> -->
		<!-- dbCache 需要配置properties属性 -->
		<!--<properties> <property name='connection' ref='db' /> </properties> -->
		<config>
			<dir>DATA:caches</dir>
			<suffix>php</suffix>
			<expires>0</expires>
		</config>
	</component>
</components>
